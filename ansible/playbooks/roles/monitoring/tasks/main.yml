---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: [setup]

- name: Install required packages
  apt:
    name:
      - wget
      - unzip
      - curl
      - nginx
      - software-properties-common
      - docker.io
    state: present
    update_cache: no
  tags: [setup]

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes
  become: yes
  tags: [docker]

- name: Create Prometheus user
  user:
    name: "{{ prometheus_user }}"
    shell: /sbin/nologin
    create_home: no
    system: yes
  tags: [prometheus]

- name: Create Prometheus data directory
  file:
    path: /data
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'
  tags: [prometheus]

- name: Download Prometheus
  unarchive:
    src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
    dest: /opt
    remote_src: yes
    creates: "/opt/prometheus-{{ prometheus_version }}.linux-amd64"
  tags: [prometheus]

- name: Move Prometheus binaries
  copy:
    src: "/opt/prometheus-{{ prometheus_version }}.linux-amd64/"
    dest: /usr/local/bin/prometheus
    remote_src: yes
    directory_mode: yes
  tags: [prometheus]

- name: Set ownership for Prometheus binaries
  file:
    path: /usr/local/bin/prometheus
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'
    recurse: yes
  tags: [prometheus]

- name: Create Prometheus config directory
  file:
    path: /etc/prometheus
    state: directory
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0755'
  tags: [prometheus]

- name: Configure Prometheus
  template:
    src: prometheus.yml.j2
    dest: "{{ prometheus_config_path }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: '0644'
  notify: Restart Prometheus
  tags: [prometheus]

- name: Create Prometheus systemd service
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
    mode: '0644'
  notify: Restart Prometheus
  tags: [prometheus]

- name: Ensure Prometheus is running
  systemd:
    name: prometheus
    state: started
    enabled: yes
    daemon_reload: yes
  tags: [prometheus]

- name: Add Grafana repository
  shell: |
    wget -q -O - https://packages.grafana.com/gpg.key | apt-key add -
    echo "deb https://packages.grafana.com/oss/deb stable main" > /etc/apt/sources.list.d/grafana.list
    apt-get update
  args:
    creates: /etc/apt/sources.list.d/grafana.list
  tags: [grafana]

- name: Install Grafana
  apt:
    name: grafana
    state: present
  tags: [grafana]

- name: Enable and start Grafana
  systemd:
    name: grafana-server
    state: started
    enabled: yes
  tags: [grafana]

- name: Create Nginx log directory
  file:
    path: /var/log/nginx
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [nginx]

- name: Create Nginx log files
  file:
    path: /var/log/nginx/{{ item }}
    state: touch
    owner: root
    group: root
    mode: '0644'
  loop:
    - access.log
    - error.log
  tags: [nginx]

- name: Create Nginx configuration directory
  file:
    path: /etc/nginx/sites-available
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [nginx]

- name: Configure Nginx
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/default
    owner: root
    group: root
    mode: '0644'
  notify: Restart Nginx
  tags: [nginx]

- name: Create symbolic link for Nginx configuration
  file:
    src: /etc/nginx/sites-available/default
    dest: /etc/nginx/sites-enabled/default
    state: link
  notify: Restart Nginx
  tags: [nginx]

- name: Create Nginx systemd service
  template:
    src: nginx.service.j2
    dest: /etc/systemd/system/nginx.service
    mode: '0644'
  notify: Restart Nginx
  tags: [nginx]

- name: Ensure Nginx is running
  systemd:
    name: nginx
    state: started
    enabled: yes
    daemon_reload: yes
  tags: [nginx]

- name: Create directory for Open WebUI data
  file:
    path: /opt/openwebui
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  tags: [openwebui]

- name: Run Open WebUI Docker container
  docker_container:
    name: "{{ docker_openwebui.name }}"
    image: "{{ docker_openwebui.image }}"
    state: "{{ docker_openwebui.state }}"
    restart_policy: "{{ docker_openwebui.restart_policy }}"
    ports: "{{ docker_openwebui.ports }}"
    volumes: "{{ docker_openwebui.volumes }}"
    env: "{{ docker_openwebui.env }}"
  vars:
    docker_openwebui: "{{ lookup('template', 'docker-openwebui.yml.j2') | from_yaml }}"
  become: yes
  tags: [openwebui]