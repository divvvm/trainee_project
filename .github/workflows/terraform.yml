name: 'Terraform CI/CD'

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  AWS_REGION: "us-east-1"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    outputs:  # Визначаємо outputs для цього job
      bastion_ip: ${{ steps.extract.outputs.bastion_ip }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          .terraform
          .terraform.lock.hcl
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf', '**/*.tfvars') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::423623847730:role/TerraformGitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init 

    - name: Terraform Format
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: terraform apply -auto-approve -input=false

    - name: Wait for infrastructure to stabilize
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: sleep 30

    - name: Terraform Refresh
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: terraform refresh

    - name: Extract IP addresses from Terraform output
      id: extract  # Додаємо id для цього кроку
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: |
        mkdir -p inventory
        echo "[webservers]" > inventory/dynamic.ini
        echo "Terraform output for webserver_ips:"
        terraform output -json webserver_ips
        terraform output -json webserver_ips | jq -r '.[]' | while read ip; do
          echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/bastion-key.pem ansible_ssh_common_args=\"-o ProxyCommand='ssh -W %h:%p -i ~/.ssh/bastion-key.pem ubuntu@${BASTION_IP}'\"" >> inventory/dynamic.ini
        done
        echo "Terraform output for bastion_public_ip:"
        terraform output -json bastion_public_ip
        BASTION_IP=$(terraform output -json bastion_public_ip | jq -r '.')
        echo "Extracted BASTION_IP: $BASTION_IP"
        echo "bastion_ip=$BASTION_IP" >> $GITHUB_OUTPUT  # Зберігаємо BASTION_IP як output

  ansible:
    name: 'Ansible Deployment'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/bastion-key.pem
        chmod 600 ~/.ssh/bastion-key.pem
        if [ -z "${{ needs.terraform.outputs.bastion_ip }}" ]; then
          echo "BASTION_IP is empty, exiting..."
          exit 1
        fi
        ssh-keyscan -H ${{ needs.terraform.outputs.bastion_ip }} >> ~/.ssh/known_hosts

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i inventory/dynamic.ini playbooks/deploy.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: False